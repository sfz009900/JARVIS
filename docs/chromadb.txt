Query and Get Data from Chroma Collections
Chroma collections can be queried in a variety of ways, using the .query method.

You can query by a set of query embeddings.


collection.query(
    query_embeddings=[[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],
    n_results=10,
    where={"metadata_field": "is_equal_to_this"},
    where_document={"$contains":"search_string"}
)
The query will return the n results closest matches to each query embedding, in order. An optional where filter dictionary can be supplied to filter by the metadata associated with each document. Additionally, an optional where document filter dictionary can be supplied to filter by contents of the document.

If the supplied query embeddings are not the same dimension as the collection, an exception will be raised.

You can also query by a set of query texts. Chroma will first embed each query text with the collection's embedding function, and then perform the query with the generated embedding.


collection.query(
    query_texts=["doc10", "thus spake zarathustra", ...],
    n_results=10,
    where={"metadata_field": "is_equal_to_this"},
    where_document={"$contains":"search_string"}
)
You can also retrieve items from a collection by id using .get.


collection.get(
	ids=["id1", "id2", "id3", ...],
	where={"style": "style1"}
)
.get also supports the where and where document filters. If no ids are supplied, it will return all items in the collection that match the where and where document filters.

Choosing Which Data is Returned
When using get or query you can use the include parameter to specify which data you want returned - any of embeddings, documents, metadatas, and for query, distances. By default, Chroma will return the documents, metadatas and in the case of query, the distances of the results. embeddings are excluded by default for performance and the ids are always returned. You can specify which of these you want returned by passing an array of included field names to the includes parameter of the query or get method. Note that embeddings will be returned as a 2-d numpy array in .get and a python list of 2-d numpy arrays in .query.


# Only get documents and ids
collection.get(
    include=["documents"]
)

collection.query(
    query_embeddings=[[11.1, 12.1, 13.1],[1.1, 2.3, 3.2], ...],
    include=["documents"]
)

Metadata Filtering
Chroma supports filtering queries by metadata and document contents. The where filter is used to filter by metadata.

In order to filter on metadata, you must supply a where filter dictionary to the query. The dictionary must have the following structure:


{
    "metadata_field": {
        <Operator>: <Value>
    }
}
Filtering metadata supports the following operators:

$eq - equal to (string, int, float)
$ne - not equal to (string, int, float)
$gt - greater than (int, float)
$gte - greater than or equal to (int, float)
$lt - less than (int, float)
$lte - less than or equal to (int, float)
Using the $eq operator is equivalent to using the where filter.


{
    "metadata_field": "search_string"
}

# is equivalent to

{
    "metadata_field": {
        "$eq": "search_string"
    }
}
Where filters only search embeddings where the key exists. If you search collection.get(where={"version": {"$ne": 1}}). Metadata that does not have the key version will not be returned.

Using logical operators
You can also use the logical operators $and and $or to combine multiple filters.

An $and operator will return results that match all of the filters in the list.


{
    "$and": [
        {
            "metadata_field": {
                <Operator>: <Value>
            }
        },
        {
            "metadata_field": {
                <Operator>: <Value>
            }
        }
    ]
}
An $or operator will return results that match any of the filters in the list.


{
    "$or": [
        {
            "metadata_field": {
                <Operator>: <Value>
            }
        },
        {
            "metadata_field": {
                <Operator>: <Value>
            }
        }
    ]
}
Using inclusion operators ($in and $nin)
The following inclusion operators are supported:

$in - a value is in predefined list (string, int, float, bool)
$nin - a value is not in predefined list (string, int, float, bool)
An $in operator will return results where the metadata attribute is part of a provided list:


{
  "metadata_field": {
    "$in": ["value1", "value2", "value3"]
  }
}
An $nin operator will return results where the metadata attribute is not part of a provided list:


{
  "metadata_field": {
    "$nin": ["value1", "value2", "value3"]
  }
}

Full Text Search
In order to filter on document contents, you must supply a where_document filter dictionary to the query. We support two filtering keys: $contains and $not_contains. The dictionary must have the following structure:


# Filtering for a search_string
{
    "$contains": "search_string"
}

# Filtering for not contains
{
    "$not_contains": "search_string"
}
You can combine full-text search with Chroma's metadata filtering.


collection.query(
    query_texts=["doc10", "thus spake zarathustra", ...],
    n_results=10,
    where={"metadata_field": "is_equal_to_this"},
    where_document={"$contains":"search_string"}
)

Python Collection

class Collection(BaseModel)
count#

def count() -> int
The total number of embeddings added to the database

Returns:

int - The total number of embeddings added to the database
add#

def add(ids: OneOrMany[ID],
        embeddings: Optional[OneOrMany[Embedding]] = None,
        metadatas: Optional[OneOrMany[Metadata]] = None,
        documents: Optional[OneOrMany[Document]] = None) -> None
Add embeddings to the data store.

Arguments:

ids - The ids of the embeddings you wish to add
embeddings - The embeddings to add. If None, embeddings will be computed based on the documents using the embedding_function set for the Collection. Optional.
metadatas - The metadata to associate with the embeddings. When querying, you can filter on this metadata. Optional.
documents - The documents to associate with the embeddings. Optional.
Returns:

None

Raises:

ValueError - If you don't provide either embeddings or documents
ValueError - If the length of ids, embeddings, metadatas, or documents don't match
ValueError - If you don't provide an embedding function and don't provide embeddings
DuplicateIDError - If you provide an id that already exists
get#

def get(ids: Optional[OneOrMany[ID]] = None,
        where: Optional[Where] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        where_document: Optional[WhereDocument] = None,
        include: Include = ["metadatas", "documents"]) -> GetResult
Get embeddings and their associate data from the data store. If no ids or where filter is provided returns all embeddings up to limit starting at offset.

Arguments:

ids - The ids of the embeddings to get. Optional.
where - A Where type dict used to filter results by. E.g. {"color" : "red", "price": 4.20}. Optional.
limit - The number of documents to return. Optional.
offset - The offset to start returning results from. Useful for paging results with limit. Optional.
where_document - A WhereDocument type dict used to filter by the documents. E.g. {$contains: {"text": "hello"}}. Optional.
include - A list of what to include in the results. Can contain "embeddings", "metadatas", "documents". Ids are always included. Defaults to ["metadatas", "documents"]. Optional.
Returns:

GetResult - A GetResult object containing the results.
peek#

def peek(limit: int = 10) -> GetResult
Get the first few results in the database up to limit

Arguments:

limit - The number of results to return.
Returns:

GetResult - A GetResult object containing the results.
query#

def query(
        query_embeddings: Optional[OneOrMany[Embedding]] = None,
        query_texts: Optional[OneOrMany[Document]] = None,
        n_results: int = 10,
        where: Optional[Where] = None,
        where_document: Optional[WhereDocument] = None,
        include: Include = ["metadatas", "documents",
                            "distances"]) -> QueryResult
Get the n_results nearest neighbor embeddings for provided query_embeddings or query_texts.

Arguments:

query_embeddings - The embeddings to get the closest neighbors of. Optional.
query_texts - The document texts to get the closest neighbors of. Optional.
n_results - The number of neighbors to return for each query_embedding or query_texts. Optional.
where - A Where type dict used to filter results by. E.g. {"color" : "red", "price": 4.20}. Optional.
where_document - A WhereDocument type dict used to filter by the documents. E.g. {$contains: {"text": "hello"}}. Optional.
include - A list of what to include in the results. Can contain "embeddings", "metadatas", "documents", "distances". Ids are always included. Defaults to ["metadatas", "documents", "distances"]. Optional.
Returns:

QueryResult - A QueryResult object containing the results.
Raises:

ValueError - If you don't provide either query_embeddings or query_texts
ValueError - If you provide both query_embeddings and query_texts
modify#

def modify(name: Optional[str] = None,
           metadata: Optional[CollectionMetadata] = None) -> None
Modify the collection name or metadata

Arguments:

name - The updated name for the collection. Optional.
metadata - The updated metadata for the collection. Optional.
Returns:

None

update#

def update(ids: OneOrMany[ID],
           embeddings: Optional[OneOrMany[Embedding]] = None,
           metadatas: Optional[OneOrMany[Metadata]] = None,
           documents: Optional[OneOrMany[Document]] = None) -> None
Update the embeddings, metadatas or documents for provided ids.

Arguments:

ids - The ids of the embeddings to update
embeddings - The embeddings to add. If None, embeddings will be computed based on the documents using the embedding_function set for the Collection. Optional.
metadatas - The metadata to associate with the embeddings. When querying, you can filter on this metadata. Optional.
documents - The documents to associate with the embeddings. Optional.
Returns:

None

upsert#

def upsert(ids: OneOrMany[ID],
           embeddings: Optional[OneOrMany[Embedding]] = None,
           metadatas: Optional[OneOrMany[Metadata]] = None,
           documents: Optional[OneOrMany[Document]] = None) -> None
Update the embeddings, metadatas or documents for provided ids, or create them if they don't exist.

Arguments:

ids - The ids of the embeddings to update
embeddings - The embeddings to add. If None, embeddings will be computed based on the documents using the embedding_function set for the Collection. Optional.
metadatas - The metadata to associate with the embeddings. When querying, you can filter on this metadata. Optional.
documents - The documents to associate with the embeddings. Optional.
Returns:

None

delete#

def delete(ids: Optional[IDs] = None,
           where: Optional[Where] = None,
           where_document: Optional[WhereDocument] = None) -> None
Delete the embeddings based on ids and/or a where filter

Arguments:

ids - The ids of the embeddings to delete
where - A Where type dict used to filter the delection by. E.g. {"color" : "red", "price": 4.20}. Optional.
where_document - A WhereDocument type dict used to filter the deletion by the document content. E.g. {$contains: {"text": "hello"}}. Optional.
Returns:

None